{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mtomicg/Colab-Notebook/blob/main/Clase_8.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Funciones Matematicas Básicas\n",
        "\n",
        "\n",
        "*   Suma de dos números se utiliza + cuando trabajamos con tipos de datos númericos y cuando trabajamos con string concatena\n",
        "*   Resta de dos números se utiliza -\n",
        "*   Multiplicación  de dos números se utiliza *\n",
        "*   División de dos números se utiliza /\n",
        "*   Potencia de dos números **\n",
        "*   División de dos números y obtener sin decimales // (trunca no redondea)\n",
        "*   Para mostrar el resto de una división se utiliza %\n",
        "*   Los paréntesis se usan para ordenar el orden de las operaciones"
      ],
      "metadata": {
        "id": "bpoANBw6pyxb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "12+9 # Suma dos numeros con '+'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "45revtVDpZxO",
        "outputId": "99cb5fd1-6940-4012-d958-9a647f025fcd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "21"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "12-7 # Resta dos numeros usando '-'"
      ],
      "metadata": {
        "id": "s5-fDmuGrE5_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2d5532d0-1b9d-4061-fb27-fb8ad3fbe277"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "12*7 # Multiplica dos numeros usando '*'"
      ],
      "metadata": {
        "id": "wuzPqtJPrzAw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d2ab8812-afad-4dd7-e65f-fb64f4b4a976"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "84"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "12/7 # Divide dos numeros usando '/'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K6Tg4tEbQG-L",
        "outputId": "ac01746c-8aac-4b6d-fd24-4db585d5f589"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.7142857142857142"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "12**7 # 12 elvado a 7"
      ],
      "metadata": {
        "id": "F8iPBV6irzHU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "77427e5f-d3f5-4919-a884-c2a42500248c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "35831808"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "15//7"
      ],
      "metadata": {
        "id": "F4RAJfgcrzNF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5334bd0c-1736-409c-d62b-f7c22362230c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "21 % 7"
      ],
      "metadata": {
        "id": "2GIBk8zkr2JH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d511450d-654d-4729-ddd3-41c794862901"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "((10+1.2) * 10)/2"
      ],
      "metadata": {
        "id": "4pid9Lv7r2Pe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cdc98f6c-b60c-4246-f394-4a8dff1093d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "56.0"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GdkwLqpir2WL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "YfveiydCr2oW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Pregunta 1\n",
        "\n",
        "La Facultad esta organizando una comida con 341 invitados. En cada mesa se sentarán 7 invitados. Como el número de invitados no es un multiplo de 7 una mesa tendrá menos de 7 puestos.\n",
        "*     ¿Cuántas mesas de 7 puestos se necesitan?\n",
        "*     En la mesa con menos de 7 invitados, ¿Cuántos puestos se necesitan?"
      ],
      "metadata": {
        "id": "OMDTvA6dsXOH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "341 // 7"
      ],
      "metadata": {
        "id": "9JGb37l_sx-G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d654c8cf-9a70-4a98-bfbf-a67a151e5d13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "48"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "341 % 7"
      ],
      "metadata": {
        "id": "F5R9zjXotUEh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "76ad6103-3016-4c8a-fa87-b5c275791861"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Variables y print\n",
        "\n",
        "La función print muestra los valores entregados.\n",
        "\n",
        "Los tipos de variables mas comunes son.\n",
        "\n",
        "*   Enteros, Integers o int\n",
        "*   Punto flotante o float\n",
        "*   Cadenas o strings\n",
        "  * Largo de un string len(s)\n",
        "  * Concatenar strings.\n",
        "*   Booleana\n",
        "\n",
        "\n",
        "La función input deja que el usuario ingrese un valor.\n",
        "\n",
        "Podemos transformar entre tipos usando:\n",
        "* str(i)\n",
        "* int(s)\n",
        "* float(s)"
      ],
      "metadata": {
        "id": "NUhIaG5Ur34K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(2+2)\n",
        "print(9*2)"
      ],
      "metadata": {
        "id": "DawykHfsupHu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d9b30104-f9e7-4656-a12e-ac0a155d9520"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n",
            "18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 = 9\n",
        "num_2 = 18\n",
        "\n",
        "num_1*num_2"
      ],
      "metadata": {
        "id": "ShKoROxnupfd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "06aa0bda-c4fd-45dc-f8ac-0a1b8f6d2c83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "162"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_3 = 7.8\n",
        "num_4 = 1.1896646846\n",
        "\n",
        "num_3*num_4"
      ],
      "metadata": {
        "id": "L1SXLKrPuprJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "74f42f22-7ec0-444d-e5c3-3645e8a8b389"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9.27938453988"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cadena_1 = \"Hola mundo!\"\n",
        "print(cadena_1)"
      ],
      "metadata": {
        "id": "Kv5FRqLvxhnF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0d20fcb3-176b-4448-bd75-01f2fbd0a877"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hola mundo!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(cadena_1)"
      ],
      "metadata": {
        "id": "oeai0ybkx20V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cdbad54f-7196-420a-b69d-4b186aad2896"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cadena_2 = cadena_1 + '!!!!'\n",
        "print(cadena_2)"
      ],
      "metadata": {
        "id": "UwrZpdVKdpWF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "87023323-829b-4156-c694-ca7ad3f27361"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hola mundo!!!!!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bool_1 = True\n",
        "bool_2 = False\n",
        "\n",
        "print(bool_1)"
      ],
      "metadata": {
        "id": "z8DNxaKcd1Je",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23996375-19b7-4ae6-9b12-3ed5c356872c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nombre = input(\"Cual es tu nombre?\")\n",
        "\n",
        "print(\"Hola \" + nombre)"
      ],
      "metadata": {
        "id": "Z_tE3SJod1Li",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6826e2d1-1a8d-4015-997a-ef544a2e323d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cual es tu nombre?Felipe\n",
            "Hola Felipe\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "edad = input(\"Cual es tu edad?\")\n",
        "edad = float(edad)\n",
        "edad + 1"
      ],
      "metadata": {
        "id": "0e_F-Pcoe8fV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8fcf485f-5ad3-4c7c-a6b5-a3a136af7c56"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cual es tu edad?33\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "34.0"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Tu edad +1 es: \" + str(edad+1) )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A4KEkxbgWfec",
        "outputId": "a831bee7-0295-4a17-9e0c-25585ed883e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tu edad +1 es: 34.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Pregunta 2\n",
        "\n",
        "Escribe un algoritmo que pregunte al usuario su nombre y su edad y que imprima en que año nació (usando la heuristica Año nacimiento = 2025 - edad)."
      ],
      "metadata": {
        "id": "sIWnlHAsx3AM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nombre = input(\"Nombre:\")\n",
        "edad   = input(\"Edad:\")\n",
        "año = 2025 - int(edad)\n",
        "\n",
        "print(\"Hola \" + nombre + \" tu año de nacimiento es: \" + str(año))"
      ],
      "metadata": {
        "id": "f7XMwCugzEbr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9523ac93-ad97-42aa-9692-b034e775942f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre:Felipe\n",
            "Edad:33\n",
            "Hola Felipe tu año de nacimiento es: 1992\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Control de Flujo o Condicionales\n",
        "\n",
        "En Python, los condicionales se usan para ejecutar un bloque de código si cierta condición es verdadera. Te permiten controla el flujo de tu programa. Python utiliza las palabras clave if, elif, else para controlar las condiciones.\n"
      ],
      "metadata": {
        "id": "8WXBrRshza3g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 0\n",
        "\n",
        "if x>0:\n",
        "  print(\"x es positivo\")\n",
        "  x = x + 1\n",
        "elif x < 0:\n",
        "  print(\"x es negativo\")\n",
        "  x = x - 1\n",
        "else:\n",
        "   print(\"x es 0\")\n",
        "\n",
        "print(\"El valor final de x es: \" + str(x))\n"
      ],
      "metadata": {
        "id": "OXEZ8TQD0AB2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "372a679f-5e72-4e19-ee22-1c8db7b88ff4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El valor final de x es: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Operadores de Comparación\n",
        "Las condiciones en las declaraciones `if` y `elif` se determinan usando operadores de comparación (`==`, `!=`, `<`, `<=`, `>`, `>=`). Por ejemplo, `x > 0` está comprobando si x es mayor que 0.\n",
        "\n",
        "Aquí están los principales operadores de comparación en Python:\n",
        "\n",
        "* Igual a (`==`): Este operador verifica si los dos valores son iguales. Por ejemplo, `5 == 3` es `False`.\n",
        "* No igual a (`!=`): Este operador verifica si los dos valores no son iguales. Por ejemplo, `5 != 3` es `True`.\n",
        "* Mayor que (`>`): Este operador verifica si el primer valor es mayor que el segundo. Por ejemplo, `5 > 3` es `True`.\n",
        "* Menor que (`<`): Este operador verifica si el primer valor es menor que el segundo. Por ejemplo, `5 < 3` es `False`.\n",
        "* Mayor o igual que (`>=`): Este operador verifica si el primer valor es mayor o igual que el segundo. Por ejemplo, `5 >= 3` es `True`.\n",
        "* Menor o igual que (`<=`): Este operador verifica si el primer valor es menor o igual que el segundo. Por ejemplo, `5 <= 3` es `False`.\n",
        "\n",
        "Por ejemplo"
      ],
      "metadata": {
        "id": "C2RpraFU0HGZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 = 12\n",
        "num_2 = 9\n",
        "num_1 == num_2"
      ],
      "metadata": {
        "id": "WzTlQY7A0CbU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "940d19bc-ec63-4bb5-ad0a-38f053f0a0f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 = 12\n",
        "num_2 = 9\n",
        "num_1 != num_2"
      ],
      "metadata": {
        "id": "USchnAe_0TTc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8544397-fb27-4ea6-bb9f-646fa35c831c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_1 <= num_2"
      ],
      "metadata": {
        "id": "EfX9YU-t0TVx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "64d1500e-63ed-4892-8683-fd546cd9c92a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Operadores and y or\n",
        "\n",
        "Igual que en Excel tenemos los operadores lógicos Y, O (en este caso en inglés).\n"
      ],
      "metadata": {
        "id": "zsM8UZqm0TlT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "if num_1 > num_2 or num_1 < num_2:\n",
        "  print(\"El numero es mayor o menor\")"
      ],
      "metadata": {
        "id": "L2ZX5-ei0k5B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0eb38f1c-8d10-4202-a9e4-668c86387b20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El numero es mayor o menor\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if num_1 >= num_2 and 9>1:\n",
        "  print(\"El numero es mayor o igual y 9 es mayor que 1\")"
      ],
      "metadata": {
        "id": "nhfH_bkI0vJF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b6babc92-56f3-4c5d-e623-b58973f53ec9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El numero es mayor o igual y 9 es mayor que 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rq8YK6wy_cs2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <u>En la clase pasada</u>\n",
        "\n",
        "* Funciones matemáticas\n",
        "   * +\n",
        "   * -\n",
        "   * *\n",
        "   * /\n",
        "   * //\n",
        "   * %\n",
        "* Funciones importantes\n",
        "   * print\n",
        "   * input\n",
        "* Variables\n",
        "   * int\n",
        "   * float\n",
        "   * string (str)\n",
        "   * bool\n",
        "* Control de flujo\n",
        "   * if / elif / else\n",
        "   * and / or\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "XcMtQJ0n_ey6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "estudiante = False\n",
        "edad = input(\"Edad:\")\n",
        "edad = int(edad)\n",
        "\n",
        "if estudiante:\n",
        "  print(\"TNE: Costo pasaje \" + str(250))\n",
        "elif edad >= 65:\n",
        "  print(\"TAM: Costo pasaje \" + str(370))\n",
        "else:\n",
        "  print(\"BIP!: Costo variable!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4ev3DDysNFjI",
        "outputId": "20917909-0da5-40de-fe58-bd8e60798a57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Edad:25\n",
            "BIP!: Costo variable!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Pregunta 3\n",
        "\n",
        "En esta pregunta vamos a hacer un recomendador de bebidas muy básico. Primero hay que preguntarle al usuario si prefiere el rojo o el amarillo. Luego tenemos que preguntarle su edad.\n",
        "\n",
        "* Si tiene menos de 20 y prefiere el amarillo entonces le recomendamos la Pap.\n",
        "* Si tiene menos de 20 y prefiere el rojo entonces le recomendamos la Bilz.\n",
        "* Si tiene mas o igual a 20 años y prefiere el amarillo le recomendamos la Canada Dry.\n",
        "* En cualquier otro caso le recomendamos Coca Cola.\n",
        "\n"
      ],
      "metadata": {
        "id": "SDCjMENO1D5H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "color = input(\"prefieres rojo o amarillo\")\n",
        "edad = float(input(\"Que edad tienes\"))\n",
        "\n",
        "if color == \"amarillo\" and edad < 20:\n",
        "  print(\"Pap\")\n",
        "elif color == \"rojo\" and edad < 20:\n",
        "  print(\"Bilz\")\n",
        "elif color == \"amarillo\" and edad >=20:\n",
        "  print(\"Canada Dry\")\n",
        "else:\n",
        "  print(\"Coca Cola\")\n"
      ],
      "metadata": {
        "id": "lTTuy58N4IvF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "color = input(\"prefieres rojo o amarillo\")\n",
        "edad = float(input(\"Que edad tienes\"))\n",
        "\n",
        "if edad < 20:\n",
        "  if color == \"amarillo\":\n",
        "    print(\"Pap\")\n",
        "  elif color == \"rojo\":\n",
        "    print(\"Bilz\")\n",
        "else:\n",
        "  if color == \"amarillo\":\n",
        "    print(\"Canada Dry\")\n",
        "  else:\n",
        "    print(\"Coca Cola\")"
      ],
      "metadata": {
        "id": "rl7fKeS6B1xi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <u> En esta clase seguimos con control de flujo </u>\n",
        "\n",
        "Control de flujo con if anidados. La importancia de la indentación."
      ],
      "metadata": {
        "id": "b6pOau03B3Ph"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "r_6UC75NB1zy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Pregunta 4\n",
        "\n",
        "Crea un algoritmo para saber si el año que ingresa un usuario es bisiesto. La lógica para saber si un año es bisiesto es la siguiente:\n",
        "\n",
        "Un año es bisiesto si es divisible por 4. Sin embargo, si también es divisible por 100, no es bisiesto. A menos que sea divisible por 400, en cuyo caso sí es bisiesto.\n",
        "\n",
        "Nota:  El número `x` es divisible por el número `y` si:\n",
        "\n",
        "`x % y == 0`"
      ],
      "metadata": {
        "id": "hw3Kq6DMPoy0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "año = int(input(\"Año\"))\n",
        "\n",
        "\n",
        "if año % 4 == 0:\n",
        "  if año % 100 == 0:\n",
        "    if año % 400 == 0:\n",
        "      print(\"Año bisiesto\")\n",
        "    else:\n",
        "      print(\"Año no bisiesto\")\n",
        "  else:\n",
        "    print(\"Año bisiesto\")\n",
        "else:\n",
        "  print(\"Año no bisiesto\")\n",
        "\n"
      ],
      "metadata": {
        "id": "i9ss7I1dB12S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0eebe70f-0f4c-45d9-bf6d-1906c426a448"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Año2025\n",
            "Año no bisiesto\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "s3EknDN5B14y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Pregunta 5\n",
        "\n",
        "Te piden crear una herramienta que compare dos posibilidades de inversión:\n",
        "\n",
        "* \\$100.000 en un depósito a plazo con una tasa de 4\\% anual.\n",
        "* Un bono (bullet) con un costo de \\$100.000 y que por cada año de inversión paga \\$5.000 y que al vencer el plazo paga los \\$100.000 devuelta.\n",
        "\n",
        "La herramienta debe preguntar el plazo en años que se desea invertir y luego responder que inversión es mejor para ese plazo.\n",
        "\n"
      ],
      "metadata": {
        "id": "xHsfgTMHUsSv"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "K8-QUmR-B17F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_l_hCBdbB2Cy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Pregunta 6\n",
        "\n",
        "Existen dos profesores que estan pidiendo la misma sala para tomar un control. Docencia ha decidido la siguiente formula para priorizar quien debería quedarse con la sala:\n",
        "\n",
        "* Si la clase necesita computadores entonces tiene preferencia sobre la otra\n",
        "* La clase que este más al principio de la malla tiene mayor preferencia\n",
        "* Si la clase tiene horario de ayudantía a la hora del control entonces tiene preferencia.\n",
        "\n",
        "Se le otorgará la sala a la clase que cumpla con el mayor número de prioridades del listado anterior. En caso de que haya un empate entonces se prefier a la clase con mas alumnos.\n",
        "\n",
        "Partiendo del siguiente codigo, escriba un algoritmo que resuelva que clase usara la sala."
      ],
      "metadata": {
        "id": "tqzavlCifkir"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clase_1_necesita_pc = True\n",
        "clase_2_necesita_pc = False\n",
        "\n",
        "clase_1_año_malla = 3\n",
        "clase_2_año_malla = 1\n",
        "\n",
        "clase_1_tiene_ayudantia = True\n",
        "clase_2_tiene_ayudantia = True\n",
        "\n",
        "clase_1_numero_alumnos = 56\n",
        "clase_2_numero_alumnos = 64\n"
      ],
      "metadata": {
        "id": "R1dUHRNB4dwU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "L8gxGhH-5yNU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "KXgtVTMr5yX7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "pJJnhQA-6Wv2"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
